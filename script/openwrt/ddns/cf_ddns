#!/bin/bash
#新功能，支持更新优选完毕后推送至TG，再也不怕脚本没有成功运行了。
#使用脚本需要安装jq和timeout，新增openwrt专用cf_RE.sh文件，运行cf_RE.sh即可在openwrt安装jq和timeout两个扩展。
#其他linux请自行安装jq和timeout。

ipv4Regex="((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])"
#默认关闭小云朵
proxy="false"
chkDnsArr=()
delDnsArr=()
excludeIp=()
CheckDelCFDns() {
  listDnsApi="https://api.cloudflare.com/client/v4/zones/${zone_id}/dns_records?name=${CDNhostname}"
  excludeIp=()
  delDnsArr=()
  chkDnsArr=()
  res=$(curl -s -X GET "$listDnsApi" -H "X-Auth-Email:$x_email" -H "X-Auth-Key:$api_key" -H "Content-Type:application/json")
  total_ct=$(echo "$res" | jq -r ".result_info.total_count")

  #echo "multFlag: $multFlag"

  if ((total_ct > 1 || multFlag == 1)); then
    # echo "total_ct:$total_ct"
    for ((i = 0; i < total_ct; i++)); do
      record_id=$(echo "$res" | jq -r ".result[$i].id")
      ip=$(echo "$res" | jq -r ".result[$i].content")
      chkDnsArr+=("$record_id"":""$ip")
      #echo "$record_id"":""$ip"
    done
  fi
}

findRecInExcludeArr() {
  local rec=$1
  local sparr=()
  IFS=':' read -ra sparr <<<"$rec"
  # echo "findRecInExcludeArr():rec:$rec"
  for ip in "${excludeIp[@]}"; do
    #echo "left:${sparr[1]}|,right:$ip|"
    if [ "${sparr[1]}" == "$ip" ]; then
      return 0
    fi
  done

  return 1
}

FilterRec() {
  # echo "FilterRec()"
  delDnsArr=()
  for i in "${!chkDnsArr[@]}"; do
    findRecInExcludeArr "${chkDnsArr[$i]}"
    #不是排除之列，则加到删除队列
    if [ $? -eq 1 ]; then
      #echo "add to delarr"
      local sparr=()
      IFS=':' read -ra sparr <<<"${chkDnsArr[$i]}"
      delDnsArr+=(${sparr[0]})
    fi

  done
}

RealDelDns() {
  delDnsApi="https://api.cloudflare.com/client/v4/zones/${zone_id}/dns_records"

  FilterRec
  for index in "${!delDnsArr[@]}"; do
    record_id=${delDnsArr[$index]}
    # 输出正在删除的记录
    #echo "正在删除第 $((index + 1)) 条 DNS 记录，记录 ID: $record_id"
    # 发出删除请求
    rt=$(curl -s -X DELETE "${delDnsApi}/$record_id" -H "Content-Type: application/json" -H "X-Auth-Email: $x_email" -H "X-Auth-Key: $api_key")
    succ=$(echo $rt | jq -r ".success")
    if [ "$succ" != "true" ]; then
      echo "删除dns记录失败,会可能引起后面更新问题，强制退出"
      exit 1
    fi

  done

}

InsertCF() {
  ipAddr=$1
  if [[ $ipAddr =~ $ipv4Regex ]]; then
    recordType="A"
  else
    recordType="AAAA"
  fi

  echo "新增$CDNhostname 的DNS记录"
  createDnsApi="https://api.cloudflare.com/client/v4/zones/${zone_id}/dns_records"
  res=$(curl -s -X POST "$createDnsApi" -H "X-Auth-Email:$x_email" -H "X-Auth-Key:$api_key" -H "Content-Type:application/json" --data "{\"type\":\"$recordType\",\"name\":\"$CDNhostname\",\"content\":\"$ipAddr\",\"proxied\":$proxy}")
  resSuccess=$(echo "$res" | jq -r ".success")

  if [[ "$resSuccess" = "true" ]]; then
    echo "$CDNhostname更新成功"
    return 0
  else
    code=$(echo "$res" | jq -r ".errors[0].code")
    #已有相同记录
    if [ $code -eq 81057 ]; then
      excludeIp+=($ipAddr)
      echo "已有[$ipAddr] IP记录不做更新"
      return 0
    else
      echo "$CDNhostname更新失败"
      return 1
    fi
  fi

}

UpInsetCF() {
  #开始DDNS
  ipAddr=$1
  if [[ $ipAddr =~ $ipv4Regex ]]; then
    recordType="A"
  else
    recordType="AAAA"
  fi

  listDnsApi="https://api.cloudflare.com/client/v4/zones/${zone_id}/dns_records?type=${recordType}&name=${CDNhostname}"
  createDnsApi="https://api.cloudflare.com/client/v4/zones/${zone_id}/dns_records"

  res=$(curl -s -X GET "$listDnsApi" -H "X-Auth-Email:$x_email" -H "X-Auth-Key:$api_key" -H "Content-Type:application/json")
  recordId=$(echo "$res" | jq -r ".result[0].id")
  recordIp=$(echo "$res" | jq -r ".result[0].content")

  echo "recordIp:$recordIp"
  if [[ $recordIp = "$ipAddr" ]]; then
    echo "更新失败，获取最快的IP与云端相同"
    excludeIp+=($ipAddr)
    resSuccess="false"
  elif [[ $recordId = "null" ]]; then
    res=$(curl -s -X POST "$createDnsApi" -H "X-Auth-Email:$x_email" -H "X-Auth-Key:$api_key" -H "Content-Type:application/json" --data "{\"type\":\"$recordType\",\"name\":\"$CDNhostname\",\"content\":\"$ipAddr\",\"proxied\":$proxy}")
    resSuccess=$(echo "$res" | jq -r ".success")
  else
    updateDnsApi="https://api.cloudflare.com/client/v4/zones/${zone_id}/dns_records/${recordId}"
    res=$(curl -s -X PUT "$updateDnsApi" -H "X-Auth-Email:$x_email" -H "X-Auth-Key:$api_key" -H "Content-Type:application/json" --data "{\"type\":\"$recordType\",\"name\":\"$CDNhostname\",\"content\":\"$ipAddr\",\"proxied\":$proxy}")
    resSuccess=$(echo "$res" | jq -r ".success")
    excludeIp+=($ipAddr)
  fi

  if [[ "$resSuccess" = "true" ]]; then
    echo "$CDNhostname更新成功"
  else
    echo "$CDNhostname更新失败"
  fi

}

#验证cf账号信息是否正确
echo "cf_ddns():zone_id:$zone_id"
echo "cf_ddns():api_key:$api_key"
res=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${zone_id}" -H "X-Auth-Email:$x_email" -H "X-Auth-Key:$api_key" -H "Content-Type:application/json")
resSuccess=$(echo "$res" | jq -r ".success")
if [[ $resSuccess != "true" ]]; then
  pushmessage="登陆错误,检查cloudflare账号信息填写是否正确！"
  source cf_push
  exit 1
fi
echo "Cloudflare账号验证成功"

if [ -z $multip ]; then
  multip=1
  multFlag=0
else
  multFlag=1
fi

#开始循环
echo "正在更新域名，请稍后..."
x=0
csvfile=""
while [[ ${x} -lt $domain_num ]]; do
  CDNhostname=${domains[$x]}
  #获取优选后的ip地址

  if [ "$CCFLAG" = "true" ]; then
    CountryCode=${countryCodes[$x]}
    csvfile="$CountryCode"".csv"
    echo "csvfile:$csvfile"
  else
    csvfile="result.csv"
  fi

  #如果没有生成对应结果文件，跳过
  if [ ! -e $csvfile ]; then
    x=$((x + 1))
    continue
  fi

  CheckDelCFDns

  lineNo=0
  ipcount=0
  while read -r line; do
    ((lineNo++))
    if ((lineNo == 1)); then
      continue
    fi
    IFS=, read -ra fields <<<"$line"
    ipAddr=${fields[0]}

    ((ipcount++))
    echo "开始更新第${ipcount}个---$ipAddr"
    if ((multFlag == 1)); then
      InsertCF $ipAddr
    else
      UpInsetCF $ipAddr
    fi

    if ((ipcount >= multip)); then
      break
    fi

  done <$csvfile

  RealDelDns
  echo "完成$csvfile的ip更新!"
  x=$((x + 1))
  sleep 1s

done >>informlog
